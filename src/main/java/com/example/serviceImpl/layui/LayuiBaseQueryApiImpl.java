package com.example.serviceImpl.layui;


import com.example.bean.UserInfoListVo;
import com.example.bean.basic.LayuiPageQueryResult;
import com.example.bean.basic.MessageResult;
import com.example.bean.exampleBean.UserInfo;
import com.example.bean.exampleBean.UserInfoExample;
import com.example.mapperInterface.autoGeneratedMapperInteger.UserInfoMapper;
import com.example.service.layui.LayuiBaseQueryApi;
import com.example.untils.DateTimeUtils;
import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import javax.annotation.Resource;
import javax.mail.internet.MimeMessage;
import java.util.List;
@Service
public class LayuiBaseQueryApiImpl implements LayuiBaseQueryApi {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Resource
    private UserInfoMapper userInfoMapper;

    @Autowired
    private JavaMailSender mailSender;

    @Value("${mail.fromMail.addr}")
    private String from;

    @Override
    public LayuiPageQueryResult<UserInfo> layuiQueryUserInfo(UserInfoListVo params) {

        LayuiPageQueryResult<UserInfo> pageQueryResult = new LayuiPageQueryResult<UserInfo>();


        //总数
        UserInfoExample ue = new UserInfoExample();
        UserInfoExample.Criteria criteria = ue.createCriteria();
        if(null!=params.getUserId()){
            criteria.andUserIdEqualTo(params.getUserId());
        }
        if(StringUtils.hasText(params.getUserName())){
            criteria.andUserNameLike("%"+params.getUserName()+"%");
        }
        //大于等于
        if(StringUtils.hasText(params.getRegisterStart())){
            criteria.andCreatDateGreaterThanOrEqualTo(DateTimeUtils.parseStr(params.getRegisterStart(),DateTimeUtils.YYYY_MM_DD));
        }
        if(StringUtils.hasText(params.getRegisterEnd())){
            criteria.andCreatDateLessThanOrEqualTo(DateTimeUtils.parseStr(params.getRegisterEnd(),DateTimeUtils.YYYY_MM_DD));
        }
        if(null!=params.getIsUse()){
            criteria.andIsUseEqualTo(params.getIsUse());
        }


        int count = userInfoMapper.countByExample(ue);
        pageQueryResult.setCount(count);
        // 分页数据
        RowBounds rowBounds = new RowBounds((params.getPage() - 1) * params.getLimit(), params.getLimit());
        List<UserInfo> userInfos = userInfoMapper.selectByExampleWithRowbounds(ue, rowBounds);

        pageQueryResult.setData(userInfos);

        return pageQueryResult;
    }

    /**
     * 行编辑修改更新
     * @param userInfo
     * @return
     */
    @Override
    public MessageResult layuiuUpdateUserInfo(UserInfoListVo userInfo) {
        MessageResult result = new MessageResult();
        //用户名重复提示
        UserInfo ui = new UserInfo();
        ui.setUserName(userInfo.getUserName());

        UserInfoExample uie = new UserInfoExample();
        uie.createCriteria().andUserNameEqualTo(userInfo.getUserName());

        List<UserInfo> userInfoList = userInfoMapper.selectByExample(uie);
        if(userInfoList.isEmpty()){
            //修改的用户名不存在同名
            //进行更新

            UserInfoExample uieex = new UserInfoExample();
            uieex.createCriteria().andUserIdEqualTo(userInfo.getUserId());

            int i = userInfoMapper.updateByExampleSelective(ui, uieex);
           // if (1==i){
                result.setMessage("用户名修改完成！");
           // }

            return result;
        }else {
            result.setMessage("用户名重复！");
            result.setResult(false);
            return result;
        }
    }

    @Override
    public MessageResult ftpDowmLoad() {
        MessageResult result = new MessageResult();

//        FtpUtil.downloadFtpFile("192.168.110.124",null,null,
//                21,"downLoad","C:\\tmp","11.txt");



//        boolean downLoad = FtpUtil.downFile("192.168.110.124", 21,
//                null, null,
//                "downLoad", "11.txt",
//                "C:\\tmp");
//        if(downLoad){
//            result.setMessage("下载成功！");
//        }else {
//            result.setResult(false);
//            result.setMessage("下载失败！");
//        }
        return result;
    }

    /**
     * 发送邮件
     * @return
     */
    @Override
    public MessageResult sendMail() {
        MessageResult result = new MessageResult();

//        SimpleMailMessage message = new SimpleMailMessage();
//        message.setFrom("chengliudegg@163.com");
//        message.setTo("335252661@qq.com");
//        message.setSubject("测试");
//        message.setText("测试的邮件");




        try {

            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true);
            //发件人
            helper.setFrom("chengliudegg@163.com");
            //收件人
            helper.setTo("chengliudegg@163.com");
            //标题
            helper.setSubject("subject");
            //文本
            helper.setText("message text");
            //附件
            mailSender.send(mimeMessage);


//            mailSender.send(message);
            result.setMessage("简单邮件已经发送");
            logger.info("简单邮件已经发送。");
        } catch (Exception e) {
            result.setResult(false);
            result.setMessage("发送简单邮件时发生异常");
            logger.error("发送简单邮件时发生异常！", e);
        }







        return result;
    }
}
